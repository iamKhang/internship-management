@model InternshipManagement.Models.ViewModels.ThongKeAdminVm
@using System.Text.Json

@{
    ViewData["Title"] = "Thống kê Admin";

    var trendJson = JsonSerializer.Serialize(Model.Trend);
    var statusJson = JsonSerializer.Serialize(Model.StatusDist);
    var fillJson = JsonSerializer.Serialize(Model.DeTaiFill);
    var byKhoaJson = JsonSerializer.Serialize(Model.ByKhoa);
    var topGvJson = JsonSerializer.Serialize(Model.TopGv);
    var termJson = JsonSerializer.Serialize(Model.ByTerm);
}

<div class="container py-3">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <h4 class="mb-0">Thống kê toàn hệ thống</h4>

        <form method="get" class="row g-2 align-items-center">
            <div class="col-auto"><input type="text" name="maKhoa" class="form-control form-control-sm" placeholder="Mã khoa" /></div>
            <div class="col-auto"><input type="number" name="maGv" class="form-control form-control-sm" placeholder="Mã GV" /></div>
            <div class="col-auto"><input type="date" name="from" class="form-control form-control-sm" /></div>
            <div class="col-auto"><input type="date" name="to" class="form-control form-control-sm" /></div>
            <div class="col-auto"><input type="number" name="namHoc" class="form-control form-control-sm" placeholder="Năm học" /></div>
            <div class="col-auto"><input type="number" name="hocKy" class="form-control form-control-sm" placeholder="Học kỳ" /></div>
            <div class="col-auto"><button class="btn btn-sm btn-primary" type="submit">Lọc</button></div>
        </form>
    </div>

    <div class="row g-3">
        <div class="col-md-2"><div class="card p-3">Đề tài: <b>@Model.Kpi.TongDeTai</b></div></div>
        <div class="col-md-2"><div class="card p-3">Giảng viên: <b>@Model.Kpi.TongGiangVien</b></div></div>
        <div class="col-md-2"><div class="card p-3">Sinh viên: <b>@Model.Kpi.TongSinhVien</b></div></div>
        <div class="col-md-2"><div class="card p-3">Pending: <b>@Model.Kpi.Pending</b></div></div>
        <div class="col-md-2"><div class="card p-3">Accepted: <b>@Model.Kpi.Accepted</b></div></div>
        <div class="col-md-2"><div class="card p-3">Completed: <b>@Model.Kpi.Completed</b></div></div>
    </div>

    <hr class="my-4" />

    <div class="row g-4">
        <div class="col-lg-6">
            <h6 class="mb-2">Xu hướng đăng ký theo tháng</h6>
            <div id="adm_trend" style="height:360px;" class="border rounded"></div>
        </div>
        <div class="col-lg-6">
            <h6 class="mb-2">Phân bố trạng thái</h6>
            <div id="adm_status" style="height:360px;" class="border rounded"></div>
        </div>

        <div class="col-12">
            <h6 class="mb-2">Lấp đầy theo đề tài</h6>
            <div id="adm_fill" style="height:420px;" class="border rounded"></div>
        </div>

        <div class="col-lg-6">
            <h6 class="mb-2">Phân bố theo Khoa</h6>
            <div id="adm_khoa" style="height:360px;" class="border rounded"></div>
        </div>
        <div class="col-lg-6">
            <h6 class="mb-2">Top Giảng viên</h6>
            <div id="adm_topgv" style="height:360px;" class="border rounded"></div>
        </div>

        <div class="col-12">
            <h6 class="mb-2">Theo Học kỳ / Năm học</h6>
            <div id="adm_term" style="height:360px;" class="border rounded"></div>
        </div>
    </div>

    @if (!Model.Trend.Any() && !Model.StatusDist.Any() && !Model.DeTaiFill.Any() && !Model.ByKhoa.Any() && !Model.TopGv.Any() && !Model.ByTerm.Any())
    {
        <div class="alert alert-info mt-4">Chưa có dữ liệu thống kê cho bộ lọc hiện tại.</div>
    }
</div>

@section Scripts {
    <script src="~/lib/echarts/dist/echarts.min.js"></script>
    <script>
        const trendData  = @Html.Raw(trendJson);
        const statusData = @Html.Raw(statusJson);
        const fillData   = @Html.Raw(fillJson);
        const byKhoaData = @Html.Raw(byKhoaJson);
        const topGvData  = @Html.Raw(topGvJson);
        const termData   = @Html.Raw(termJson);

        // Trend
        (function () {
            const el = document.getElementById('adm_trend');
            const chart = echarts.init(el);
            const xs = trendData.map(p => `${p.Nam}-${String(p.Thang).padStart(2, '0')}`);
            const ys = trendData.map(p => p.SoDangKy);
            chart.setOption({
                tooltip: { trigger: 'axis' },
                xAxis: { type: 'category', data: xs },
                yAxis: { type: 'value' },
                series: [{ type: 'line', data: ys, smooth: true }]
            });
            window.addEventListener('resize', () => chart.resize());
        })();
        // Status
        (function () {
            const el = document.getElementById('adm_status');
            const chart = echarts.init(el);
            const labelMap = { 0: 'Pending', 1: 'Accepted', 2: 'InProgress', 3: 'Completed', 4: 'Rejected', 5: 'Withdrawn' };
            chart.setOption({
                tooltip: { trigger: 'item' },
                legend: { top: 'bottom' },
                series: [{
                    type: 'pie',
                    radius: ['35%', '70%'],
                    data: statusData.map(s => ({ name: labelMap[s.TrangThai] ?? s.TrangThai, value: s.SoLuong }))
                }]
            });
            window.addEventListener('resize', () => chart.resize());
        })();

        // Fill per topic
        (function () {
            const el = document.getElementById('adm_fill');
            const chart = echarts.init(el);
            const names = fillData.map(d => d.TenDt);
            const used  = fillData.map(d => d.SlotDaDung);
            const left  = fillData.map(d => d.SlotConLai);
            const wait  = fillData.map(d => d.DangChoDuyet);
            chart.setOption({
                tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
                grid: { left: 80, right: 20, bottom: 20, containLabel: true },
                xAxis: { type: 'value' },
                yAxis: { type: 'category', data: names },
                series: [
                    { name: 'Đã dùng',   type: 'bar', stack: 'total', data: used },
                    { name: 'Còn lại',   type: 'bar', stack: 'total', data: left },
                    { name: 'Chờ duyệt', type: 'bar', stack: 'total', data: wait }
                ]
            });
            window.addEventListener('resize', () => chart.resize());
        })();

        // By Khoa
        (function () {
            const el = document.getElementById('adm_khoa');
            const chart = echarts.init(el);
            const xs = byKhoaData.map(k => k.MaKhoa);
            const used = byKhoaData.map(k => k.TongSlotDaDung);
            const done = byKhoaData.map(k => k.DaHoanThanh);
            chart.setOption({
                tooltip: { trigger: 'axis' },
                legend: {},
                xAxis: { type: 'category', data: xs },
                yAxis: { type: 'value' },
                series: [
                    { name: 'Slot đã dùng', type: 'bar', data: used },
                    { name: 'Hoàn thành',  type: 'bar', data: done }
                ]
            });
            window.addEventListener('resize', () => chart.resize());
        })();

        // Top GV
        (function () {
            const el = document.getElementById('adm_topgv');
            const chart = echarts.init(el);
            const names = topGvData.map(g => `${g.MaGv} - ${g.HoTenGv}`);
            const completed = topGvData.map(g => g.Completed);
            const doing     = topGvData.map(g => g.DangThucHien);
            const pending   = topGvData.map(g => g.Pending);
            chart.setOption({
                tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
                grid: { left: 140, right: 20, bottom: 20, containLabel: true },
                xAxis: { type: 'value' },
                yAxis: { type: 'category', data: names },
                series: [
                    { name: 'Completed',       type: 'bar', stack: 's', data: completed },
                    { name: 'Đang thực hiện',  type: 'bar', stack: 's', data: doing },
                    { name: 'Pending',         type: 'bar', stack: 's', data: pending }
                ]
            });
            window.addEventListener('resize', () => chart.resize());
        })();

        // By Term
        (function () {
            const el = document.getElementById('adm_term');
            const chart = echarts.init(el);
            const xs = termData.map(t => `${t.NamHoc}-HK${t.HocKy}`);
            const used = termData.map(t => t.SlotDaDung);
            const done = termData.map(t => t.HoanThanh);
            const wait = termData.map(t => t.ChoDuyet);
            chart.setOption({
                tooltip: { trigger: 'axis', axisPointer: { type: 'shadow' } },
                xAxis: { type: 'category', data: xs },
                yAxis: { type: 'value' },
                series: [
                    { name: 'Đã dùng',   type: 'bar', stack: 't', data: used },
                    { name: 'Hoàn thành',type: 'bar', stack: 't', data: done },
                    { name: 'Chờ duyệt', type: 'bar', stack: 't', data: wait }
                ]
            });
            window.addEventListener('resize', () => chart.resize());
        })();
    </script>
}
